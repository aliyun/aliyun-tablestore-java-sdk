// automatically generated by the FlatBuffers compiler, do not modify

package com.alicloud.openservices.tablestore.core.protocol.sql.flatbuffers;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class SQLResponseColumn extends Table {
  public static SQLResponseColumn getRootAsSQLResponseColumn(ByteBuffer _bb) { return getRootAsSQLResponseColumn(_bb, new SQLResponseColumn()); }
  public static SQLResponseColumn getRootAsSQLResponseColumn(ByteBuffer _bb, SQLResponseColumn obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public SQLResponseColumn __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String columnName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer columnNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer columnNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public byte columnType() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public ColumnValues columnValue() { return columnValue(new ColumnValues()); }
  public ColumnValues columnValue(ColumnValues obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public ComplexColumnTypeInfo columnComplexTypeInfo() { return columnComplexTypeInfo(new ComplexColumnTypeInfo()); }
  public ComplexColumnTypeInfo columnComplexTypeInfo(ComplexColumnTypeInfo obj) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createSQLResponseColumn(FlatBufferBuilder builder,
      int column_nameOffset,
      byte column_type,
      int column_valueOffset,
      int column_complex_type_infoOffset) {
    builder.startObject(4);
    SQLResponseColumn.addColumnComplexTypeInfo(builder, column_complex_type_infoOffset);
    SQLResponseColumn.addColumnValue(builder, column_valueOffset);
    SQLResponseColumn.addColumnName(builder, column_nameOffset);
    SQLResponseColumn.addColumnType(builder, column_type);
    return SQLResponseColumn.endSQLResponseColumn(builder);
  }

  public static void startSQLResponseColumn(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addColumnName(FlatBufferBuilder builder, int columnNameOffset) { builder.addOffset(0, columnNameOffset, 0); }
  public static void addColumnType(FlatBufferBuilder builder, byte columnType) { builder.addByte(1, columnType, 0); }
  public static void addColumnValue(FlatBufferBuilder builder, int columnValueOffset) { builder.addOffset(2, columnValueOffset, 0); }
  public static void addColumnComplexTypeInfo(FlatBufferBuilder builder, int columnComplexTypeInfoOffset) { builder.addOffset(3, columnComplexTypeInfoOffset, 0); }
  public static int endSQLResponseColumn(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

