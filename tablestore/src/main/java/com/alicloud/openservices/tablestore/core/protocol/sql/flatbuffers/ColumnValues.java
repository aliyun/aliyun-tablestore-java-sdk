// automatically generated by the FlatBuffers compiler, do not modify

package com.alicloud.openservices.tablestore.core.protocol.sql.flatbuffers;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ColumnValues extends Table {
  public static ColumnValues getRootAsColumnValues(ByteBuffer _bb) { return getRootAsColumnValues(_bb, new ColumnValues()); }
  public static ColumnValues getRootAsColumnValues(ByteBuffer _bb, ColumnValues obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public ColumnValues __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public boolean isNullvalues(int j) { int o = __offset(4); return o != 0 ? 0!=bb.get(__vector(o) + j * 1) : false; }
  public int isNullvaluesLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer isNullvaluesAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer isNullvaluesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public long longValues(int j) { int o = __offset(6); return o != 0 ? bb.getLong(__vector(o) + j * 8) : 0; }
  public int longValuesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer longValuesAsByteBuffer() { return __vector_as_bytebuffer(6, 8); }
  public ByteBuffer longValuesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 8); }
  public boolean boolValues(int j) { int o = __offset(8); return o != 0 ? 0!=bb.get(__vector(o) + j * 1) : false; }
  public int boolValuesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer boolValuesAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer boolValuesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public double doubleValues(int j) { int o = __offset(10); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int doubleValuesLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer doubleValuesAsByteBuffer() { return __vector_as_bytebuffer(10, 8); }
  public ByteBuffer doubleValuesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 8); }
  public String stringValues(int j) { int o = __offset(12); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int stringValuesLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public BytesValue binaryValues(int j) { return binaryValues(new BytesValue(), j); }
  public BytesValue binaryValues(BytesValue obj, int j) { int o = __offset(14); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int binaryValuesLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public RLEStringValues rleStringValues() { return rleStringValues(new RLEStringValues()); }
  public RLEStringValues rleStringValues(RLEStringValues obj) { int o = __offset(16); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createColumnValues(FlatBufferBuilder builder,
      int is_nullvaluesOffset,
      int long_valuesOffset,
      int bool_valuesOffset,
      int double_valuesOffset,
      int string_valuesOffset,
      int binary_valuesOffset,
      int rle_string_valuesOffset) {
    builder.startObject(7);
    ColumnValues.addRleStringValues(builder, rle_string_valuesOffset);
    ColumnValues.addBinaryValues(builder, binary_valuesOffset);
    ColumnValues.addStringValues(builder, string_valuesOffset);
    ColumnValues.addDoubleValues(builder, double_valuesOffset);
    ColumnValues.addBoolValues(builder, bool_valuesOffset);
    ColumnValues.addLongValues(builder, long_valuesOffset);
    ColumnValues.addIsNullvalues(builder, is_nullvaluesOffset);
    return ColumnValues.endColumnValues(builder);
  }

  public static void startColumnValues(FlatBufferBuilder builder) { builder.startObject(7); }
  public static void addIsNullvalues(FlatBufferBuilder builder, int isNullvaluesOffset) { builder.addOffset(0, isNullvaluesOffset, 0); }
  public static int createIsNullvaluesVector(FlatBufferBuilder builder, boolean[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addBoolean(data[i]); return builder.endVector(); }
  public static void startIsNullvaluesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addLongValues(FlatBufferBuilder builder, int longValuesOffset) { builder.addOffset(1, longValuesOffset, 0); }
  public static int createLongValuesVector(FlatBufferBuilder builder, long[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addLong(data[i]); return builder.endVector(); }
  public static void startLongValuesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addBoolValues(FlatBufferBuilder builder, int boolValuesOffset) { builder.addOffset(2, boolValuesOffset, 0); }
  public static int createBoolValuesVector(FlatBufferBuilder builder, boolean[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addBoolean(data[i]); return builder.endVector(); }
  public static void startBoolValuesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addDoubleValues(FlatBufferBuilder builder, int doubleValuesOffset) { builder.addOffset(3, doubleValuesOffset, 0); }
  public static int createDoubleValuesVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startDoubleValuesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addStringValues(FlatBufferBuilder builder, int stringValuesOffset) { builder.addOffset(4, stringValuesOffset, 0); }
  public static int createStringValuesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startStringValuesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addBinaryValues(FlatBufferBuilder builder, int binaryValuesOffset) { builder.addOffset(5, binaryValuesOffset, 0); }
  public static int createBinaryValuesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startBinaryValuesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRleStringValues(FlatBufferBuilder builder, int rleStringValuesOffset) { builder.addOffset(6, rleStringValuesOffset, 0); }
  public static int endColumnValues(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

