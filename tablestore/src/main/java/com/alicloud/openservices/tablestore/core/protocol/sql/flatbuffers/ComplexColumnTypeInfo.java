// automatically generated by the FlatBuffers compiler, do not modify

package com.alicloud.openservices.tablestore.core.protocol.sql.flatbuffers;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ComplexColumnTypeInfo extends Table {
  public static ComplexColumnTypeInfo getRootAsComplexColumnTypeInfo(ByteBuffer _bb) { return getRootAsComplexColumnTypeInfo(_bb, new ComplexColumnTypeInfo()); }
  public static ComplexColumnTypeInfo getRootAsComplexColumnTypeInfo(ByteBuffer _bb, ComplexColumnTypeInfo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public ComplexColumnTypeInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte columnLogicType() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public byte columnEncodeType() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createComplexColumnTypeInfo(FlatBufferBuilder builder,
      byte column_logic_type,
      byte column_encode_type) {
    builder.startObject(2);
    ComplexColumnTypeInfo.addColumnEncodeType(builder, column_encode_type);
    ComplexColumnTypeInfo.addColumnLogicType(builder, column_logic_type);
    return ComplexColumnTypeInfo.endComplexColumnTypeInfo(builder);
  }

  public static void startComplexColumnTypeInfo(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addColumnLogicType(FlatBufferBuilder builder, byte columnLogicType) { builder.addByte(0, columnLogicType, 0); }
  public static void addColumnEncodeType(FlatBufferBuilder builder, byte columnEncodeType) { builder.addByte(1, columnEncodeType, 0); }
  public static int endComplexColumnTypeInfo(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

