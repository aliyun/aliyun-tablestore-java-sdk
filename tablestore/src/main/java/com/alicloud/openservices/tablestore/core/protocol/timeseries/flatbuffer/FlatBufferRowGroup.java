// automatically generated by the FlatBuffers compiler, do not modify

package com.alicloud.openservices.tablestore.core.protocol.timeseries.flatbuffer;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FlatBufferRowGroup extends Table {
  public static FlatBufferRowGroup getRootAsFlatBufferRowGroup(ByteBuffer _bb) { return getRootAsFlatBufferRowGroup(_bb, new FlatBufferRowGroup()); }
  public static FlatBufferRowGroup getRootAsFlatBufferRowGroup(ByteBuffer _bb, FlatBufferRowGroup obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public FlatBufferRowGroup __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String measurementName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer measurementNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer measurementNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String fieldNames(int j) { int o = __offset(6); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int fieldNamesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public byte fieldTypes(int j) { int o = __offset(8); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int fieldTypesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer fieldTypesAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer fieldTypesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public FlatBufferRowInGroup rows(int j) { return rows(new FlatBufferRowInGroup(), j); }
  public FlatBufferRowInGroup rows(FlatBufferRowInGroup obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int rowsLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }

  public static int createFlatBufferRowGroup(FlatBufferBuilder builder,
      int measurement_nameOffset,
      int field_namesOffset,
      int field_typesOffset,
      int rowsOffset) {
    builder.startObject(4);
    FlatBufferRowGroup.addRows(builder, rowsOffset);
    FlatBufferRowGroup.addFieldTypes(builder, field_typesOffset);
    FlatBufferRowGroup.addFieldNames(builder, field_namesOffset);
    FlatBufferRowGroup.addMeasurementName(builder, measurement_nameOffset);
    return FlatBufferRowGroup.endFlatBufferRowGroup(builder);
  }

  public static void startFlatBufferRowGroup(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addMeasurementName(FlatBufferBuilder builder, int measurementNameOffset) { builder.addOffset(0, measurementNameOffset, 0); }
  public static void addFieldNames(FlatBufferBuilder builder, int fieldNamesOffset) { builder.addOffset(1, fieldNamesOffset, 0); }
  public static int createFieldNamesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFieldNamesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addFieldTypes(FlatBufferBuilder builder, int fieldTypesOffset) { builder.addOffset(2, fieldTypesOffset, 0); }
  public static int createFieldTypesVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startFieldTypesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addRows(FlatBufferBuilder builder, int rowsOffset) { builder.addOffset(3, rowsOffset, 0); }
  public static int createRowsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRowsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endFlatBufferRowGroup(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

