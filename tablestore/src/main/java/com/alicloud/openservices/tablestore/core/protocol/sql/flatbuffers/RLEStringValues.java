// automatically generated by the FlatBuffers compiler, do not modify

package com.alicloud.openservices.tablestore.core.protocol.sql.flatbuffers;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class RLEStringValues extends Table {
  public static RLEStringValues getRootAsRLEStringValues(ByteBuffer _bb) { return getRootAsRLEStringValues(_bb, new RLEStringValues()); }
  public static RLEStringValues getRootAsRLEStringValues(ByteBuffer _bb, RLEStringValues obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public RLEStringValues __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String array(int j) { int o = __offset(4); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int arrayLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public int indexMapping(int j) { int o = __offset(6); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int indexMappingLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer indexMappingAsByteBuffer() { return __vector_as_bytebuffer(6, 4); }
  public ByteBuffer indexMappingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 4); }

  public static int createRLEStringValues(FlatBufferBuilder builder,
      int arrayOffset,
      int index_mappingOffset) {
    builder.startObject(2);
    RLEStringValues.addIndexMapping(builder, index_mappingOffset);
    RLEStringValues.addArray(builder, arrayOffset);
    return RLEStringValues.endRLEStringValues(builder);
  }

  public static void startRLEStringValues(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addArray(FlatBufferBuilder builder, int arrayOffset) { builder.addOffset(0, arrayOffset, 0); }
  public static int createArrayVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startArrayVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addIndexMapping(FlatBufferBuilder builder, int indexMappingOffset) { builder.addOffset(1, indexMappingOffset, 0); }
  public static int createIndexMappingVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startIndexMappingVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endRLEStringValues(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

